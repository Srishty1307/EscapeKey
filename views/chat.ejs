<!-- views/chat.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Support - Escape Key</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #F9D923;
            color: #333;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        header {
            background-color: #EB5353;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-title {
            font-size: 20px;
            font-weight: bold;
        }

        .back-button {
            color: white;
            text-decoration: none;
            font-size: 24px;
        }

        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 0 auto;
            width: 100%;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .message {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 18px;
            margin-bottom: 5px;
            word-wrap: break-word;
        }

        .user-message {
            align-self: flex-end;
            background-color: #187498;
            color: white;
            border-bottom-right-radius: 5px;
        }

        .assistant-message {
            align-self: flex-start;
            background-color: #F0F0F0;
            border-bottom-left-radius: 5px;
        }

        .message-input {
            display: flex;
            padding: 10px;
            background-color: #f5f5f5;
            border-top: 1px solid #ddd;
        }

        .message-input input {
            flex: 1;
            padding: 12px;
            border: 1px solid #ccc;
            border-radius: 25px;
            margin-right: 10px;
            font-size: 16px;
        }

        .message-input button {
            background-color: #36AE7C;
            color: white;
            border: none;
            border-radius: 50%;
            width: 46px;
            height: 46px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .message-input button:hover {
            background-color: #2D8A62;
        }

        .typing-indicator {
            display: none;
            align-self: flex-start;
            background-color: #F0F0F0;
            padding: 8px 16px;
            border-radius: 18px;
            margin-bottom: 10px;
            color: #555;
        }

        .sos-button {
            position: fixed;
            bottom: 80px;
            right: 20px;
            background-color: #E63946;
            color: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 16px;
            font-weight: bold;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            border: none;
        }

        .sos-button:hover {
            background-color: #d32638;
        }

        /* Responsive adjustments */
        @media (max-width: 500px) {
            .chat-container {
                height: calc(100vh - 70px);
                border-radius: 0;
                max-width: 100%;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
</head>
<body>
    <header>
        <a href="/index" class="back-button"><i class="bi bi-arrow-left"></i></a>
        <div class="header-title">Chat Support</div>
        <div style="width: 24px;"></div> <!-- Empty div for flex spacing -->
    </header>

    <div class="chat-container">
        <div class="chat-messages" id="chatMessages">
            <!-- Messages will be added here -->
            <div class="message assistant-message">
                Hello! I'm your virtual assistant. How can I help you today?
            </div>
        </div>

        <div class="typing-indicator" id="typingIndicator">
            Assistant is typing...
        </div>

        <div class="message-input">
            <input type="text" id="messageInput" placeholder="Type your message..." autocomplete="off">
            <button id="sendButton"><i class="bi bi-send-fill"></i></button>
        </div>
    </div>

    <button class="sos-button" id="sosButton">SOS</button>

    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script>
        // Initialize Supabase client
        const supabaseUrl = 'https://ymxigsibffkloakqualr.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlteGlnc2liZmZrbG9ha3F1YWxyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMzNTEyNTgsImV4cCI6MjA1ODkyNzI1OH0.E_Y4CqmWN12peYFdn6qyXTKw6ja1e9AfT-b3kDg9_6M';
        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        
        let userId = null;
        const chatMessages = document.getElementById('chatMessages');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        const typingIndicator = document.getElementById('typingIndicator');
        const sosButton = document.getElementById('sosButton');
        
        // Check if user is logged in
        async function checkUser() {
            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (user) {
                    userId = user.id;
                    // Start a chat session
                    startChatSession();
                } else {
                    window.location.href = '/login';
                }
            } catch (err) {
                console.error('Error checking user:', err);
            }
        }
        
        // Start a chat session
        async function startChatSession() {
            try {
                const response = await fetch('/api/chat/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId })
                });
                
                const result = await response.json();
                if (!result.success) {
                    console.error('Failed to start chat session:', result.error);
                }
            } catch (err) {
                console.error('Error starting chat session:', err);
            }
        }
        
        // Send message to the chat
        async function sendMessage() {
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Add user message to chat
            addMessage(message, 'user');
            messageInput.value = '';
            
            // Show typing indicator
            typingIndicator.style.display = 'block';
            
            try {
                const response = await fetch('/api/chat/message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userId,
                        message
                    })
                });
                
                const result = await response.json();
                
                // Hide typing indicator
                typingIndicator.style.display = 'none';
                
                if (result.success) {
                    // Add assistant's response to chat
                    addMessage(result.response, 'assistant');
                } else {
                    console.error('Error sending message:', result.error);
                    addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                }
            } catch (err) {
                console.error('Error:', err);
                typingIndicator.style.display = 'none';
                addMessage('Sorry, I encountered an error. Please try again.', 'assistant');
            }
        }
        
        // Add a message to the chat
        function addMessage(text, sender) {
            const messageElement = document.createElement('div');
            messageElement.className = `message ${sender}-message`;
            messageElement.textContent = text;
            
            chatMessages.appendChild(messageElement);
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Emergency SOS function
        async function triggerSOS() {
            try {
                // Get user's location
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const location = {
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    };
                    
                    // Send SOS alert
                    const response = await fetch('/api/send-sos', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            userId,
                            latitude: location.latitude,
                            longitude: location.longitude
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        alert('SOS alert sent to your emergency contacts!');
                        
                        // Also notify in chat
                        addMessage('SOS alert has been sent to your emergency contacts with your current location.', 'assistant');
                    } else {
                        alert('Failed to send SOS alert: ' + (result.error || 'Unknown error'));
                    }
                }, (error) => {
                    console.error('Geolocation error:', error);
                    alert('Unable to get your location. Please try again.');
                });
            } catch (err) {
                console.error('Error triggering SOS:', err);
                alert('Error: ' + (err.message || 'Failed to send SOS alert.'));
            }
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', checkUser);
        
        sendButton.addEventListener('click', sendMessage);
        
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        sosButton.addEventListener('click', triggerSOS);
    </script>
</body>
</html>